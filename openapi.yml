openapi: 3.0.3
info:
  title: Image Compare
  version: 0.1.0
  description: Backend for image compare, a website for facilitating citizen science projects relating to imaging and mathematics.
  contact:
    email: lily.mosquitoes@gmail.com
    
servers:
  - url: http://127.0.0.1:8000
 
tags:
  - name: Healthcheck
  - name: User
  - name: Comparison
  - name: Vote
  - name: Image
  
paths:
  /api/healthcheck:
    get:
      summary: perform healthcheck
      description: Returns OK, endpoint for CI/CD
      operationId: get_healthcheck
      tags:
        - Healthcheck
      responses:
        '200':
          description: Server is up and responding
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultProperties'
  /api/user/{id}:
    get:
      summary: get a user by id
      description: Returns the information of the user by ID
      operationId: get_user
      tags:
        - User
      parameters:
        - name: id
          in: path
          schema:
            type: string
            format: uuid
          required: true
        - $ref: '#/components/parameters/AcceptHeader'
      responses:
        '200':
          description: User information returned
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/DefaultProperties'
                - type: object
                  properties:                    
                    data:
                      $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/DefaultProperties'
                - type: object
                  properties:                    
                    error:
                      type: string
                      example: 'ID must be UUID'
        '404':
          $ref: '#/components/responses/404_NotFound'
        '406':
          $ref: '#/components/responses/406_NotAcceptable'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
  /api/user:
    post:
      summary: create a new user
      description: Creates a new user in the database
      operationId: post_user
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/AcceptHeader'
      responses:
        '201':
          description: User Created
          headers:
            Location:
              $ref: '#/components/headers/Location'
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/DefaultProperties'
                - type: object
                  properties:                    
                    data:
                      $ref: '#/components/schemas/User'
        '406':
          $ref: '#/components/responses/406_NotAcceptable'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
  /api/comparison:
    get:
      summary: get a "random" comparison
      description: Returns a "random" comparison object
      operationId: get_comparison
      tags:
        - Comparison
      responses:
        '200':
          description: Images returned for comparison; currently always 2
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/DefaultProperties'
                - type: object
                  properties:                    
                    data:
                      $ref: '#/components/schemas/Comparison'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
        '503':
          $ref: '#/components/responses/503_ServiceUnavailable'
  /api/vote:
    post:
      summary: vote on a comparison, as a user
      description: Creates a vote of the user for a comparison
      operationId: post_vote
      tags:
        - Vote
      parameters:
        - $ref: '#/components/parameters/AcceptHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteForm'
      responses:
        '201':
          description: Vote Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/DefaultProperties'
                - type: object
                  properties:                    
                    data:
                      $ref: '#/components/schemas/Vote'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/DefaultProperties'
                - type: object
                  properties:                    
                    error:
                      type: string
                      example: 'Parameter `user_id` must be UUID'
        '406':
          $ref: '#/components/responses/406_NotAcceptable'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/DefaultProperties'
                - type: object
                  properties:                    
                    error:
                      type: string
                      example: 'Parameter `user_id` must be valid User UUID'
        '500':
          $ref: '#/components/responses/500_InternalServerError'
  /static/images/{filename}:
    get:
      summary: get an image with a filename
      description: Returns an image
      operationId: get_image
      tags:
        - Image
      parameters:
        - name: filename
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Image returned
          content:
            image/png:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/404_NotFound'

components:
  parameters:
    AcceptHeader:
      name: Accept
      in: header
      schema:
        type: string
        format: media-type
        enum: ["*/*", "application/json"]
      required: false
  headers:
    Accept:
      description: Accepted MIME type
      schema:
        type: string
        format: mime-type
        example: 'application/json'
    Location:
      description: Location of the created resource
      schema:
        type: string
        format: uri
        example: 'http://localhost:3000/api/path'
    Retry-After:
      description: Estimated downtime, in seconds
      schema:
        type: integer
        example: 36000
  responses:
    404_NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultProperties'
              - type: object
                properties:
                  error:
                    type: string
                    example: 'Resource not found'
    406_NotAcceptable:
      description: MIME-type Not Acceptable
      headers:
        Accept:
          $ref: '#/components/headers/Accept'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultProperties'
              - type: object
                properties:
                  error:
                    type: string
                    example: 'MIME type not acceptable; available: application/json'
    500_InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultProperties'
              - type: object
                properties:
                  error:
                    type: string
                    example: 'The server encountered an error; please contact the server administrator'
    503_ServiceUnavailable:
      description: Service Unavailable
      headers:
        Retry-After:
          $ref: '#/components/headers/Retry-After'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/DefaultProperties'
              - type: object
                properties:
                  error:
                    type: string
                    example: 'This service is unavailable; please try later'
  schemas:
    DefaultProperties:
      type: object
      properties:
        request_id:
          type: integer
        timestamp:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        comparisons:
          type: integer
        average_lambda:
          type: number
          format: float
    Comparison:
      type: object
      properties:
        id:
          type: string
          format: uuid
        images:
          type: array
          items:
            type: string
            format: uri
            example: 'http://localhost:3000/api/images/imageA.png'
          example: ['http://localhost:3000/api/images/imageA.png', 'http://localhost:3000/api/images/imageB.png']
    VoteForm:
      type: object
      properties:
        comparison_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        vote:
          type: string
          format: uri
          example: 'http://localhost:3000/api/images/imageA.png'
    Vote:
      allOf:
      - type: object
        properties:
          id:
            type: string
            format: uuid
      - $ref: '#/components/schemas/VoteForm'
